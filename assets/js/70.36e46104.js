(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{371:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、面向对象的基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、面向对象的基本概念"}},[t._v("#")]),t._v(" 一、面向对象的基本概念")]),t._v(" "),s("h3",{attrs:{id:"什么是对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是对象"}},[t._v("#")]),t._v(" 什么是对象")]),t._v(" "),s("p",[t._v("对象是对现实的抽象与模拟。现实中的每个事物都是一个对象，现实中的抽象事物也可以是对象。"),s("br"),t._v("\n面向对象编程用对象表示事物，用对象间的关系表示事物间的联系，这就是面向对象的基本思想。"),s("br"),t._v("\n事物通常具有属性和行为，体现在对象上就是对象有变量和方法。"),s("br"),t._v("\n变量表示对象的属性，方法表示对象的行为，对象是属性和行为的封装。"),s("br"),t._v("\n面向过程的编程(如C语言)是将问题分解为一个个步骤来解决，而面向对象的编程则是把问题分解为一个个对象来解决。")]),t._v(" "),s("h3",{attrs:{id:"什么是类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是类"}},[t._v("#")]),t._v(" 什么是类")]),t._v(" "),s("p",[t._v("一个类是一组具有相同属性和行为的对象的原型，或者说是对象的模板。"),s("br"),t._v("\n类用来创建对象，当使用一个类创建了一个对象时，也可以说创建了这个类的一个实例。")]),t._v(" "),s("h3",{attrs:{id:"面向对象的基本特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的基本特征"}},[t._v("#")]),t._v(" 面向对象的基本特征")]),t._v(" "),s("h4",{attrs:{id:"_1-封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-封装"}},[t._v("#")]),t._v(" 1. 封装")]),t._v(" "),s("p",[t._v("把对象的属性和行为封装在一起，形成一个不可分割的实体，只保留有限的对外接口。"),s("br"),t._v("\n在编程上的体现：")]),t._v(" "),s("ul",[s("li",[t._v("将属性及方法定义在一个类中；")]),t._v(" "),s("li",[t._v("对来自类外部的访问进行控制。")])]),t._v(" "),s("h4",{attrs:{id:"_2-继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-继承"}},[t._v("#")]),t._v(" 2. 继承")]),t._v(" "),s("p",[t._v("继承是描述事物间的一般与特殊关系。"),s("br"),t._v("\n特殊类从一般类继承属性与行为。"),s("br"),t._v("\n例如，轮船和客轮之间是一般和特殊关系，动物和狗之间也是一般和特殊关系。"),s("br"),t._v("\n称一般类为父类(或超类，superclass)，特殊类为子类(或派生类，subclass)。"),s("br"),t._v("\n子类继承父类的属性和行为，同时具有自己独特的属性与行为。"),s("br"),t._v("\n比如，客轮除了具有轮船的一般特性之外，还有自己独有的特性。 "),s("br")]),t._v(" "),s("h4",{attrs:{id:"_3-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-多态"}},[t._v("#")]),t._v(" 3. 多态")]),t._v(" "),s("p",[t._v("有两种多态，一种是一个类中有多个操作具有相同的名字，但这些操作所接收的输入参数各不相同，称为方法重载。"),s("br"),t._v("\n另一种多态与继承有关，指父类的方法被不同的子类继承后表现出不同的行为。"),s("br"),t._v("\n例如，“几何图形”是父类，有“绘图”方法，“椭圆”和“多边形”是子类，都继承了 “绘图”这个方法，但表现出的绘图行为各不相同。 "),s("br")]),t._v(" "),s("h2",{attrs:{id:"二、类的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、类的定义"}},[t._v("#")]),t._v(" 二、类的定义")]),t._v(" "),s("h3",{attrs:{id:"类定义的语法格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类定义的语法格式"}},[t._v("#")]),t._v(" 类定义的语法格式")]),t._v(" "),s("p",[t._v("类是Java程序的基本单位，定义格式如下所示：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("修饰符"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 类名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                                               \n\t类体                               \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("class是定义类的关键字，后面跟着类名，一对花括加上括起来的内容称作类体。括号内的修饰符是可选项，目前你们只见过public修饰符，其它的修饰符后面会陆续讲到。")]),t._v(" "),s("p",[t._v("public是修饰符，Person是类名。类名必须是合法的标识符，最好见名知意。习惯上类名的首字母大写，其余字母小写。如果类名由几个单词构成，则习惯上每个单词的首字母大写，其余字母小写。")]),t._v(" "),s("h3",{attrs:{id:"类体的构成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类体的构成"}},[t._v("#")]),t._v(" 类体的构成")]),t._v(" "),s("p",[t._v("类体包括：")]),t._v(" "),s("ul",[s("li",[t._v("成员变量：定义在类体中的变量；")]),t._v(" "),s("li",[t._v("成员方法：定义在类体中的函数。成员变量表示对象的属性，成员方法表示对象的行为。")])]),t._v(" "),s("p",[t._v("成员变量和成员方法的名字必须是合法的标识符，习惯上字母都小写。若由多个单词组成则从第2个单词开始的首字母大写，其余字母小写。")]),t._v(" "),s("h3",{attrs:{id:"说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[t._v("#")]),t._v(" 说明")]),t._v(" "),s("h4",{attrs:{id:"_1-成员变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-成员变量"}},[t._v("#")]),t._v(" (1) 成员变量")]),t._v(" "),s("ul",[s("li",[t._v("成员变量的类型可以是Java中的任何一种类型，包括八种基本类型和三种引用类型(类、数组、接口)。")]),t._v(" "),s("li",[t._v("成员变量在整个类体内部都有效，与它在类体中的定义位置无关。")]),t._v(" "),s("li",[t._v("可以在定义成员变量的同时赋初值。")]),t._v(" "),s("li",[t._v("如果定义时没有赋初值，则系统会默认的赋初值(基本类型的初值是0或0.0、false，引用类型是null)。")]),t._v(" "),s("li",[t._v("对成员变量的操作只能在方法体中，不能在类体中。")])]),t._v(" "),s("h4",{attrs:{id:"_2-成员方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-成员方法"}},[t._v("#")]),t._v(" (2) 成员方法")]),t._v(" "),s("p",[t._v("除构造方法以外的其它方法称为成员方法，成员方法的声明格式如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("修饰符"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 返回值类型 方法名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("参数列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    方法体\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("一对花括号括起来的内容称作方法体。除了抽象方法之外，其它所有方法必须有方法体。如果方法的返回值类型是void类型，则方法体中可以没有任何语句。")]),t._v(" "),s("li",[t._v("方法体包括变量声明和Java语句。")]),t._v(" "),s("li",[t._v("在方法体内定义的变量和方法的形参都是局部变量。")]),t._v(" "),s("li",[t._v("形参在方法体内有效，定义在方法体中的或者代码块(花括号括起来的代码)中的局部变量的作用域是从定义位置开始直到方法结束或代码块结束。")]),t._v(" "),s("li",[t._v("局部变量的名字习惯上小写，若由多个单词组成则从第2个单词开始的首字母大写，其余字母小写。")]),t._v(" "),s("li",[t._v("当方法被调用时局部变量才会被创建，方法执行完毕局部变量就被撤销。")]),t._v(" "),s("li",[t._v("局部变量在使用前必须赋一次初值，否则是语法错误，可以在定义时初始化，也可以定义时不初始化而在使用前赋一次初值。")])]),t._v(" "),s("h4",{attrs:{id:"_3-构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-构造方法"}},[t._v("#")]),t._v(" (3) 构造方法")]),t._v(" "),s("p",[t._v("类有一种特殊的方法称作构造方法，构造方法的名字与它所属类的名字相同，没有返回值类型。")]),t._v(" "),s("ul",[s("li",[t._v("在创建一个类的对象时，系统会自动的调用该类的构造方法。")]),t._v(" "),s("li",[t._v("Java允许一个类有多个构造方法，但这些构造方法的参数列表必须不同。")])]),t._v(" "),s("h4",{attrs:{id:"eg"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eg"}},[t._v("#")]),t._v(" EG")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     \n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" sideA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sideB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     \n     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数的构造方法")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n         sideA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         sideB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     \n     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有参数的构造方法。")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n         sideA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         sideB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     \n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computerGirth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sideA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sideB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"三、对象的创建与使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、对象的创建与使用"}},[t._v("#")]),t._v(" 三、对象的创建与使用")]),t._v(" "),s("h3",{attrs:{id:"对象的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建"}},[t._v("#")]),t._v(" 对象的创建")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("声明对象变量\n形式： 类名  变量名;\n例：Rect  rectangleOne;")])]),t._v(" "),s("li",[s("p",[t._v("创建对象\n形式：new 类名(构造方法的参数列表);"),s("br"),t._v("\n例："),s("code",[t._v("rectangleOne = new Rect(); 或 rectangleOne = new Rect(10,20);")])])]),t._v(" "),s("li",[s("p",[t._v("声明和创建可一步完成：Rect  rectangleOne = new Rect(10,20);")])])]),t._v(" "),s("h4",{attrs:{id:"说明-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说明-2"}},[t._v("#")]),t._v(" 说明")]),t._v(" "),s("ul",[s("li",[t._v("用new运算符创建对象时，系统会自动调用构造方法。")]),t._v(" "),s("li",[t._v("如果创建对象时有初始化操作，可以放在构造方法里执行，在构造方法中可以执行任意合法的Java语句。")]),t._v(" "),s("li",[t._v("如果一个类没有定义构造方法，系统会为这个类添加默认的构造方法(无参数的空方法)，否则不会为该类添加默认的构造方法。")]),t._v(" "),s("li",[t._v("当类有多个构造方法时，系统根据创建对象时的参数列表来确定调用哪个方法，哪个参数列表能匹配上就调用哪个。")])]),t._v(" "),s("h3",{attrs:{id:"对象的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的使用"}},[t._v("#")]),t._v(" 对象的使用")]),t._v(" "),s("p",[t._v("使用圆点符“.”访问对象的成员变量和成员方法。")]),t._v(" "),s("ul",[s("li",[t._v("访问对象的成员变量： 对象名.变量名;")]),t._v(" "),s("li",[t._v("访问对象的成员方法： 对象名.方法名(实参列表);")])]),t._v(" "),s("h3",{attrs:{id:"对象的引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的引用"}},[t._v("#")]),t._v(" 对象的引用")]),t._v(" "),s("p",[t._v("对象创建的过程：")]),t._v(" "),s("ul",[s("li",[t._v("在内存中创建对象；")]),t._v(" "),s("li",[t._v("调用构造方法；")]),t._v(" "),s("li",[t._v("返回对象的引用。")])]),t._v(" "),s("p",[t._v("new运算符创建对象成功后返回一个指向内存中该对象的引用，而不是对象自身。引用型变量保存的是对象的引用值而非对象自身。一个引用值是一个16进制的整数，代表一个对象，具有唯一性。在程序中，当把对象的引用赋给一个变量后，就可以通过该变量来访问对象。通常简单称对象变量为对象。")]),t._v(" "),s("h3",{attrs:{id:"对象数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象数组"}},[t._v("#")]),t._v(" 对象数组")]),t._v(" "),s("p",[t._v("数组是相同类型的变量按顺序组成的集合，数组的元素不仅可以是基本类型，还可以是引用类型。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("需要注意的是，上述代码仅定义并创建了有10个元素的数组m，每个元素是一个Integer类型的引用型变量。引用类型的数组如果没有初始化，系统默认的将每个元素的值初始化为空引用null，所以目前数组的每个元素都是null值。在使用数组m之前，应当为每个数组元素创建一个对象，EG：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      \n")])])]),s("h3",{attrs:{id:"垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),s("p",[t._v("对于Java程序，编程者只需要创建对象，而不需要考虑销毁对象，销毁对象由JVM的垃圾回收机制自动完成。当Java程序不再使用某个对象时，JVM的垃圾回收机制会释放该对象所占用的内存。例如，使用赋值语句t1 = t2把t2的引用赋给t1，那么t1就不再引用原来的对象，如果没有其它变量引用该对象，则JVM认为t1原来引用的对象没用了，会销毁该对象。        \n如果将关键字null赋给对象变量，如t1 = null，则t1不再引用任何对象。")]),t._v(" "),s("h2",{attrs:{id:"课后练习题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#课后练习题"}},[t._v("#")]),t._v(" 课后练习题")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\ta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"="')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t\ta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foreach输出循环")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);