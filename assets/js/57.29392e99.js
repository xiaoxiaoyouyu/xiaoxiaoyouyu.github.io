(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{358:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"第六章-数和二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第六章-数和二叉树"}},[t._v("#")]),t._v(" 第六章 数和二叉树")]),t._v(" "),a("h3",{attrs:{id:"二叉树的定义与特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的定义与特点"}},[t._v("#")]),t._v(" 二叉树的定义与特点")]),t._v(" "),a("h4",{attrs:{id:"二叉树的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的定义"}},[t._v("#")]),t._v(" 二叉树的定义")]),t._v(" "),a("p",[t._v("二叉树或为空树，或是由一个根结点加上两棵分别称为左子树和右子树的、互不相交的二叉树组成（即左、右子树次序不能颠倒）。")]),t._v(" "),a("h4",{attrs:{id:"二叉树的五种形态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的五种形态"}},[t._v("#")]),t._v(" 二叉树的五种形态")]),t._v(" "),a("ul",[a("li",[t._v("空树")]),t._v(" "),a("li",[t._v("只有根节点")]),t._v(" "),a("li",[t._v("右子树为空")]),t._v(" "),a("li",[t._v("左子树为空")]),t._v(" "),a("li",[t._v("左右子树都不为空")])]),t._v(" "),a("h4",{attrs:{id:"二叉树的性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的性质"}},[t._v("#")]),t._v(" 二叉树的性质")]),t._v(" "),a("p",[t._v("性质1: 非空二叉树中，第i层（i≥1）上最多为2i-1个结点。\n性质2: 深度为k（k>=1）的二叉树中，结点总数最多为2k-1。\n性质3: 对任何一棵二叉树，若它含有n0个叶子结点、n2个度为2的结点，则必存在关系式：n0= n2+1。")]),t._v(" "),a("p",[t._v("满二叉树: 深度为k且含有2k-1个结点的二叉树。\n完全二叉树: 在深度为k的满二叉树中，按层次顺序从上到下、每层从左至右，从编号1开始连续取n（0≤n≤2k-1）个结点所构成的二叉树。")]),t._v(" "),a("p",[t._v("性质4: 具有n个结点的完全二叉树的深度为log2n+1。\n性质5: 若对含n个结点的完全二叉树从上到下且从左至右进行1至n的编号，则对完全二叉树中任意一个编号为i的结点：")]),t._v(" "),a("ol",[a("li",[t._v("若i=1，则该结点是二叉树的根，无双亲；否则，编号为i/2的结点为其双亲结点。")]),t._v(" "),a("li",[t._v("若2i>n，则该结点无左孩子；否则，编号为2i的结点为其左孩子结点。")]),t._v(" "),a("li",[t._v("若2i+1>n，则该结点无右孩子结点；否则，编号为2i+1的结点为其右孩子结点。")])]),t._v(" "),a("h3",{attrs:{id:"二叉树的存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的存储"}},[t._v("#")]),t._v(" 二叉树的存储")]),t._v(" "),a("h4",{attrs:{id:"顺序存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序存储"}},[t._v("#")]),t._v(" 顺序存储")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("MAXSIZE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" TElemType SqBiTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXSIZE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"链式存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式存储"}},[t._v("#")]),t._v(" 链式存储")]),t._v(" "),a("ul",[a("li",[t._v("二叉链表")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BiTNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    TElemType data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BiTNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("BiTNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("BiTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("三叉链表")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TriTNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    TElemType data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TriTNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TriTNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("TiTNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("TriTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"二叉树的递归遍历算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的递归遍历算法"}},[t._v("#")]),t._v(" 二叉树的递归遍历算法")]),t._v(" "),a("p",[t._v("遍历二叉树的概念:"),a("br"),t._v("\n遍历二叉树就是如何按某条搜索路径巡访二叉树中的每个结点，使得每个结点均被访问一次，而且仅被访问一次。")]),t._v(" "),a("h4",{attrs:{id:"遍历实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历实现"}},[t._v("#")]),t._v(" 遍历实现")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("使用二叉链表")])]),t._v(" "),a("ul",[a("li",[t._v("先序遍历")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("Status "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BiTree T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("ul",[a("li",[t._v("中序遍历")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("Status "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IneOrderTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BiTree T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IneOrderTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IneOrderTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("ul",[a("li",[t._v("后序遍历")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("Status "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PostOrderTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BiTree T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PostOrderTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PostOrderTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("ul",[a("li",[t._v("层次遍历")])]),t._v(" "),a("p",[t._v("首先将根入队列， 以后若队列不空则出队头元素p， 如果p不空， 则访问之。 然后将其左右孩子入队列， 如此循环直到队列为空。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("Status "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LevelTraverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BiTree T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InitQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化队列")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EnQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根入队列")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EmptyQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列不空则继续遍历")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DeQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//队头元素出队")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EnQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EnQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"huffman-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#huffman-tree"}},[t._v("#")]),t._v(" Huffman Tree")]),t._v(" "),a("h4",{attrs:{id:"huffman-tree-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#huffman-tree-定义"}},[t._v("#")]),t._v(" Huffman Tree 定义")]),t._v(" "),a("p",[t._v("由n个带权叶子结点构成的所有二叉树中，带权路径长度WPL最小的二叉树，称为哈夫曼树，又称最优二叉树。")]),t._v(" "),a("ol",[a("li",[t._v("如何计算二叉树的带权路径长度？\n树中所有叶子结点的带权路径长度之和。记作，WPL=∑wili。")]),t._v(" "),a("li",[t._v("如何计算叶子结点的带权路径长度？\n叶子结点的权值乘以该结点的路径长度。")]),t._v(" "),a("li",[t._v("如何计算叶子结点的路径长度？\n从根结点到该叶子结点的路径上的分支数目。")])]),t._v(" "),a("h3",{attrs:{id:"huffman-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#huffman-code"}},[t._v("#")]),t._v(" Huffman Code")]),t._v(" "),a("h4",{attrs:{id:"前缀编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前缀编码"}},[t._v("#")]),t._v(" 前缀编码")]),t._v(" "),a("p",[t._v("任何一个字符的编码都不是同一字符集中另一个字符的编码的前缀。"),a("br"),t._v("\n哈夫曼树中， 约定左分支标0， 右分支标1， 则从根结点到叶子结点的路径上分支字符组成的01字符串构成叶子结点的哈夫曼编码。")])])}),[],!1,null,null,null);s.default=e.exports}}]);