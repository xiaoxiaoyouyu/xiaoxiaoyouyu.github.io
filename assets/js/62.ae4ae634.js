(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{363:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("h3",{attrs:{id:"面向对象的基本特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的基本特征"}},[t._v("#")]),t._v(" 面向对象的基本特征")]),t._v(" "),s("ul",[s("li",[t._v("封装\n"),s("ul",[s("li",[t._v("把对象的属性和行为封装在一起, 形成一个不可分割的实体, 只保留有限的对外接口.")]),t._v(" "),s("li",[t._v("在编程上, 将属性与方法定义在一个类中, 并对来自类外部的访问进行控制.")])])]),t._v(" "),s("li",[t._v("继承\n"),s("ul",[s("li",[t._v("继承是描述事物间的一般与特殊关系.")]),t._v(" "),s("li",[t._v("特殊类从一般类继承属性与行为, 称一般类为父类(或超类, superclass), 特殊类为子类(或派生类, subclass).")]),t._v(" "),s("li",[t._v("子类继承父类的属性和行为, 同时具有自己独特的属性与行为.")])])]),t._v(" "),s("li",[t._v("多态\n"),s("ul",[s("li",[t._v("一个类中有多个操作具有相同的名字, 但这些操作所接收的输入参数各不相同, 称为方法重载")]),t._v(" "),s("li",[t._v("指父类的方法被不同的子类继承后表现出不同的行为")])])])]),t._v(" "),s("h3",{attrs:{id:"类的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的定义"}},[t._v("#")]),t._v(" 类的定义")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("修饰符"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("类名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("类体"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// EG: ")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" test "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("class是定义类的关键字, 后面跟着类名.")]),t._v(" "),s("li",[t._v("一对花括号及其包含内容称作类体.")]),t._v(" "),s("li",[t._v("中括号内的修饰符是可选项, public就是一个修饰符")])]),t._v(" "),s("h3",{attrs:{id:"类体的构成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类体的构成"}},[t._v("#")]),t._v(" 类体的构成")]),t._v(" "),s("ul",[s("li",[t._v("成员变量: 定义在类体中的变量, 表示对象的属性.")]),t._v(" "),s("li",[t._v("成员方法: 定义在类体中的函数, 表示对象的行为.")])]),t._v(" "),s("p",[s("code",[t._v("只能在方法体中操作变量")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("修饰符"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("返回值类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("方法名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("参数列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("方法体"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// EG: ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("一对花括号'{}'括起来的部分称为方法体.")]),t._v(" "),s("li",[t._v("除了抽象方法外, 其他所有方法"),s("code",[t._v("必须有方法体")]),t._v(".")]),t._v(" "),s("li",[t._v("如果方法的返回值类型是void, 则方法中可以没有任何语句.")]),t._v(" "),s("li",[t._v("方法体中包括变量声明和语句.")]),t._v(" "),s("li",[t._v("在方法体内部声明的变量和方法的形参都是局部变量.")]),t._v(" "),s("li",[t._v("形参的作用域(变量有效的区域)是整个方法体内部")]),t._v(" "),s("li",[t._v("局部变量的作用域是从定义位置开始到方法结束")]),t._v(" "),s("li",[t._v("如果局部变量定义在代码块(用花括号括起来的区域)中, 则是从定义位置开始到代码块结束.")]),t._v(" "),s("li",[s("code",[t._v("方法被调用时局部变量才会被创建, 方法执行完毕局部变量就会被撤销.")])]),t._v(" "),s("li",[s("code",[t._v("局部变量在使用前必须赋初值, 可以在定义时赋初值, 也可以在使用前赋一次初值.")])])]),t._v(" "),s("h4",{attrs:{id:"构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("构造方法的名字与它所属类的名字相同, 没有返回值类型.")])]),t._v(" "),s("li",[t._v("在创建一个类的对象时, JVM会自动调用该类的构造方法.")]),t._v(" "),s("li",[t._v("允许有多个构造方法, 但是这些构造方法的参数列表必须不同.")])]),t._v(" "),s("h3",{attrs:{id:"对象的创建与使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建与使用"}},[t._v("#")]),t._v(" 对象的创建与使用")]),t._v(" "),s("p",[s("code",[t._v("对象必须先创建然后才能使用")])]),t._v(" "),s("h4",{attrs:{id:"对象的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建"}},[t._v("#")]),t._v(" 对象的创建")]),t._v(" "),s("p",[t._v("step 1."),s("br"),t._v("\n声明对象变量: "),s("code",[t._v("类名 变量名")])]),t._v(" "),s("p",[t._v("step 2."),s("br"),t._v("\n创建对象:  "),s("code",[t._v("new 类名(参数列表)")]),t._v(" 然后赋值给对象, 此处参数列表是构造方法的输入参数.")]),t._v(" "),s("ul",[s("li",[t._v("如果一个类没有定义构造方法, 系统会为这个类添加默认的构造方法, 否则不会为该类添加默认的构造方法.")]),t._v(" "),s("li",[t._v("默认的构造方法是无参数的空方法")]),t._v(" "),s("li",[t._v("当一个类有多个构造方法时, 创建对象时所使用的参数列表与哪个构造方法的参数列表相匹配, 就调用哪个构造方法")])]),t._v(" "),s("h4",{attrs:{id:"对象的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的使用"}},[t._v("#")]),t._v(" 对象的使用")]),t._v(" "),s("p",[t._v("一个对象完成创建之后, 就可以访问该对象的成员变量和成员方法.")]),t._v(" "),s("ul",[s("li",[t._v("访问对象的成员变量: "),s("code",[t._v("对象名.变量名")])]),t._v(" "),s("li",[t._v("访问对象的成员方法: "),s("code",[t._v("对象名.方法名(实参列表)")])])]),t._v(" "),s("h4",{attrs:{id:"对象的引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的引用"}},[t._v("#")]),t._v(" 对象的引用")]),t._v(" "),s("p",[t._v("new 操作符创建对象完成")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("为对象分配存储空间")])]),t._v(" "),s("li",[s("p",[t._v("调用构造方法")])]),t._v(" "),s("li",[s("p",[t._v("返回对象的引用")])]),t._v(" "),s("li",[s("p",[t._v("创建对象成功后, 返回一个对象的引用, 而不是对象自身.")])]),t._v(" "),s("li",[s("p",[t._v("一个引用的值是一个16进制的整数, 代表一个对象, 具有唯一性.")])]),t._v(" "),s("li",[s("p",[t._v("把某个对象的引用赋值给一个变量, 就称该变量引用了这个对象, 可以通过该变量来访问这个对象.")])])]),t._v(" "),s("h4",{attrs:{id:"对象数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象数组"}},[t._v("#")]),t._v(" 对象数组")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Student类型的对象数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" stu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"类变量和实例变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类变量和实例变量"}},[t._v("#")]),t._v(" 类变量和实例变量")]),t._v(" "),s("p",[t._v("成员变量分为: "),s("code",[t._v("类变量")]),t._v("和"),s("code",[t._v("实例变量")])]),t._v(" "),s("ul",[s("li",[t._v("用关键字static修饰的成员变量称作类变量(也称作静态变量)")]),t._v(" "),s("li",[t._v("没有使用static修饰的成员变量称作实例变量")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("实例变量从属于对象, 必须通过对象访问.")]),t._v(" "),s("li",[t._v("类变量从属于类, 即使没有创建对象依旧存在.一个类的某个类变量只有一份, 被该类的所有对象所共享.")]),t._v(" "),s("li",[s("code",[t._v("类变量可以通过对象访问, 也可以通过类名访问")])])]),t._v(" "),s("h4",{attrs:{id:"类方法和实例方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类方法和实例方法"}},[t._v("#")]),t._v(" 类方法和实例方法")]),t._v(" "),s("p",[t._v("成员方法分为: "),s("code",[t._v("类方法")]),t._v("和"),s("code",[t._v("实例方法")])]),t._v(" "),s("ul",[s("li",[t._v("使用关键字static修饰的成员方法称作类方法(也称作静态方法)")]),t._v(" "),s("li",[t._v("没有使用static修饰的成员方法称作实例方法")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mult")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("实例方法必须通过对象访问")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("类方法可以通过对象访问, 也可以通过类名访问")])])]),t._v(" "),s("li",[s("p",[t._v("在一个类的实例方法内部可以访问该类的实例方法和类方法以及实例变量和类变量")])]),t._v(" "),s("li",[s("p",[t._v("类方法内部只能访问类方法和类变量, 不能访问实例方法和实例变量")])])]),t._v(" "),s("h3",{attrs:{id:"final常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final常量"}},[t._v("#")]),t._v(" final常量")]),t._v(" "),s("p",[s("code",[t._v("final常量一旦给定就不能再改变")])]),t._v(" "),s("ul",[s("li",[t._v("final可以修饰类变量、实例变量、局部变量")]),t._v(" "),s("li",[t._v("final修饰的类变量也称作类常量, 必须在声明的同时赋初值.")]),t._v(" "),s("li",[t._v("final修饰的实例变量可以在声明的时候赋初值, 也可以在构造方法中赋初值, 不能在其他地方赋初值.")]),t._v(" "),s("li",[t._v("final修饰的局部变量可以在声明的时候赋初值, 也可以在使用前赋一次初值")]),t._v(" "),s("li",[t._v("final修饰符可以和其他修饰符的位置进行改变")])]),t._v(" "),s("h3",{attrs:{id:"关键字this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键字this"}},[t._v("#")]),t._v(" 关键字this")]),t._v(" "),s("p",[t._v("this表示当前对象, 他的值是当前对象的引用, 他的类型是当前对象的类型."),s("br"),t._v(" "),s("code",[t._v("this关键字只能用于实例方法和构造方法中, 不能用于类方法中.")])]),t._v(" "),s("ul",[s("li",[t._v("this关键字可以出现在构造方法中, 表示该构造方法要初始化的那个对象")]),t._v(" "),s("li",[t._v("构造方法中, 可以通过this关键字访问对象的成员变量(类变量或实例变量)、成员方法(类方法或实例方法)、以及其它构造方法.")]),t._v(" "),s("li",[t._v("在一个类的构造方法中可以通过this关键字调用该类的其它造方法, 表示在执行该构造方法时, 先执行其它构造方法.此时该语句必须是第一条语句, 而且只能出现一次.这种情况不能省略this关键字.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先执行构造方法 A(String name), 再执行当前构造方法.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"成员的访问权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员的访问权限"}},[t._v("#")]),t._v(" 成员的访问权限")]),t._v(" "),s("p",[t._v("访问权限是指在一个类的内部是否可以访问另一个类的成员变量或成员方法."),s("br"),t._v("\n在一个类的内部访问自己的成员变量和成员方法与访问权限无关."),s("br"),t._v("\n可以使用public、private、protected、缺省等关键字限定成员变量和成员方法的访问权限.")]),t._v(" "),s("h4",{attrs:{id:"private"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#private"}},[t._v("#")]),t._v(" private")]),t._v(" "),s("ul",[s("li",[t._v("用关键字private修饰的成员变量和成员方法称为私有的成员变量和私有的成员方法")]),t._v(" "),s("li",[t._v("一个类的私有的成员变量和方法, 只有本类才能访问")])]),t._v(" "),s("h4",{attrs:{id:"public"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public"}},[t._v("#")]),t._v(" public")]),t._v(" "),s("ul",[s("li",[t._v("用public修饰的成员变量和成员方法称为公有的成员变量和成员方法.")]),t._v(" "),s("li",[t._v("公有的成员访问不受限制, 在任何类的内部都能访问其它类的公   有成员.")])]),t._v(" "),s("h4",{attrs:{id:"友好的成员变量和成员方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#友好的成员变量和成员方法"}},[t._v("#")]),t._v(" 友好的成员变量和成员方法")]),t._v(" "),s("ul",[s("li",[t._v("没有用private、public、protected等关键字修饰的成员变量和成员方法称为友好的成员变量和友好的成员方法.")]),t._v(" "),s("li",[t._v("定义在同一个包中的类可以互相访问对方的友好成员, 不是定义在同一个包中的类不能访问对方的友好成员.")])]),t._v(" "),s("h4",{attrs:{id:"受保护的成员变量和成员方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#受保护的成员变量和成员方法"}},[t._v("#")]),t._v(" 受保护的成员变量和成员方法")]),t._v(" "),s("ul",[s("li",[t._v("用protected修饰的成员变量和成员方法称为受保护的成员变量和成员方法")]),t._v(" "),s("li",[t._v("定义在同一个包中的类能够互相访问对方受保护的成员")]),t._v(" "),s("li",[t._v("protected成员还具有继承访问权限")])]),t._v(" "),s("h3",{attrs:{id:"类的权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的权限"}},[t._v("#")]),t._v(" 类的权限")]),t._v(" "),s("h4",{attrs:{id:"public类和友好类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public类和友好类"}},[t._v("#")]),t._v(" public类和友好类")]),t._v(" "),s("ul",[s("li",[t._v("用public修饰符的类称为"),s("code",[t._v("public类")])]),t._v(" "),s("li",[t._v("不用public修饰符的类称为"),s("code",[t._v("友好类")])]),t._v(" "),s("li",[s("code",[t._v("public类可以被所有类访问")])]),t._v(" "),s("li",[s("code",[t._v("友好类只能被同一个包中的类访问")])])]),t._v(" "),s("h4",{attrs:{id:"构造方法的权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造方法的权限"}},[t._v("#")]),t._v(" 构造方法的权限")]),t._v(" "),s("ul",[s("li",[t._v("private、public 、protected、缺省等访问权限同样适用于构造方法, 和普通方法的访问权限规则相同")]),t._v(" "),s("li",[t._v("public类的默认构造方法是public权限的, 友好类的默认构造方法是友好权限的")])]),t._v(" "),s("h3",{attrs:{id:"方法重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法重载"}},[t._v("#")]),t._v(" 方法重载")]),t._v(" "),s("ul",[s("li",[t._v("方法重载是指一个类的多个方法具有相同的名字, 但这些方法的参数列表不同: 参数的个数或参数的类型不同")]),t._v(" "),s("li",[t._v("方法的返回值类型和参数的名字不参与比较, 与重载无关")]),t._v(" "),s("li",[t._v("方法重载是多态的一种")])]),t._v(" "),s("h3",{attrs:{id:"基本数据对象的封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据对象的封装"}},[t._v("#")]),t._v(" 基本数据对象的封装")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("基本类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("byte")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("short")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("long")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("float")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("double")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("char")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("boolean")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("封装类")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Byte")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Integer")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Short")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Long")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Float")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Double")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Character")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Boolean")])])])]),t._v(" "),s("h4",{attrs:{id:"自动装箱-与-自动拆箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动装箱-与-自动拆箱"}},[t._v("#")]),t._v(" 自动装箱 与 自动拆箱")]),t._v(" "),s("p",[t._v("自动装箱: "),s("code",[t._v("基本类型转成封装类型")]),s("br"),t._v("\n自动拆箱: "),s("code",[t._v("封装类型转成基本类型")])])])}),[],!1,null,null,null);a.default=e.exports}}]);