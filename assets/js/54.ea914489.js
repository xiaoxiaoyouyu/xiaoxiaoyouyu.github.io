(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{355:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"第九章-查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第九章-查找"}},[t._v("#")]),t._v(" 第九章 查找")]),t._v(" "),a("p",[t._v("查找表是由同一类型的数据元素(或记录)构成的集合."),a("br"),t._v("\n查找表常用的操作有下面四个:")]),t._v(" "),a("ol",[a("li",[t._v("查询某个“特定的”数据元素是否在查找表中;")]),t._v(" "),a("li",[t._v("检索某个“特定的”数据元素的各种属性;")]),t._v(" "),a("li",[t._v("在查找表中插入一个数据元素;")]),t._v(" "),a("li",[t._v("从查找表中删去某个数据元素。")])]),t._v(" "),a("h3",{attrs:{id:"顺序查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序查找"}},[t._v("#")]),t._v(" 顺序查找")]),t._v(" "),a("ul",[a("li",[t._v("所谓顺序查找，又称线性查找，主要用于在线性结构中进行查找。")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    KeyType key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("SSTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"顺序查找算法的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序查找算法的实现"}},[t._v("#")]),t._v(" 顺序查找算法的实现")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("Status "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Search_Seq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SSTable ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" KeyType key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"折半查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#折半查找"}},[t._v("#")]),t._v(" 折半查找")]),t._v(" "),a("ul",[a("li",[t._v("所谓折半查找，是指先确定待查找记录所在范围，然后逐步缩小，范围直到找到或找不到该记录为止。")])]),t._v(" "),a("h4",{attrs:{id:"折半查找算法的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#折半查找算法的实现"}},[t._v("#")]),t._v(" 折半查找算法的实现")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("Status "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Search_Bin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SSTable ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" KeyType key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" L "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" H "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" M"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        M "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("M"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("M"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            H "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" M "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            L "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" M "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"二叉排序树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉排序树"}},[t._v("#")]),t._v(" 二叉排序树")]),t._v(" "),a("h4",{attrs:{id:"二叉排序数的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉排序数的定义"}},[t._v("#")]),t._v(" 二叉排序数的定义")]),t._v(" "),a("ul",[a("li",[t._v("二叉排序树是一种动态树表。其特点是，树的结构通常不是一次生成的，而是在查找过程中，当树中不存在关键字等于给定值的结点的时候再迚行插入。新插入结点一定是一个新添加的叶子结点，并且是查找不成功时查找路径上访问的最后一个结点的左孩子或右孩子结点。\n"),a("br")]),t._v(" "),a("li",[t._v("一个无序序列可以通过构造一棵二叉排序树而变成一个有序序列，构造树的过程即为对无序序列迚行排序的过程。")]),t._v(" "),a("li",[t._v("从刚才的插入过程还可以看到，每次插入的新结点都是二叉排序树上新的叶子结点，则在迚行插入操作时候，不必移动其他结点，仅需改动某个结点的指针，由空变为非空即可。这就相当于在一个有序序列上插入一个记录而不需要移动其他记录。")]),t._v(" "),a("li",[t._v("这表明，二叉排序树既拥有类似于折半查找的特性，又采用了链表作为存储结构，因此是动态查找表的一种适宜表示。")])]),t._v(" "),a("p",[t._v("二叉排序树或者是一棵空树; 或者是具有如下特性的二叉树:")]),t._v(" "),a("ol",[a("li",[t._v("若它的左子树丌空，则左子树上所有结点的值均小于根结点的值;")]),t._v(" "),a("li",[t._v("若它的右子树丌空，则右子树上所有结点的值均大于根结点的值;")]),t._v(" "),a("li",[t._v("它的左、右子树也都分别是二叉排序树。")])]),t._v(" "),a("h4",{attrs:{id:"二叉平衡树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉平衡树"}},[t._v("#")]),t._v(" 二叉平衡树")]),t._v(" "),a("h4",{attrs:{id:"哈希表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希表"}},[t._v("#")]),t._v(" 哈希表")]),t._v(" "),a("ul",[a("li",[t._v("若查找结构中存在关键字和K相等的记录，则必定在f(K)的存储位置上，因此，不需要进行比较便可直接取得所查记录，这里，我们称这个对应关系f为哈希函数，f(K)为哈希地址，按这个思想建立的查找表叫做哈希表。\n"),a("br")]),t._v(" "),a("li",[t._v("哈希函数是一个映像，因此哈希函数的设定很灵活幵丌是唯一的，只要使得任何关键字通过哈希函数得到的值都落在表长允许的范围之内即可。")]),t._v(" "),a("li",[t._v("对不同的关键字可能得到同一个地址，比如乊前例子里的beijing和binzhou,也就是关键字key1丌等于关键字key2,但是关键字key1和关键字key2的哈希地址是相同的。这种现象叫做冲突。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);